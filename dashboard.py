
# dashboard.py

import os
import tempfile

import streamlit as st
import openai
from pptx import Presentation
from pptx.util import Inches, Pt
from qdrant_client.http.exceptions import ResponseHandlingException

# import your renamed helper
from qdrant_utils import get_qdrant_client

# --- Configuration from Streamlit secrets ---
openai.api_key = os.getenv("OPENAI_API_KEY")

# Initialize Qdrant client, with error handling
try:
    qdrant_url = os.getenv("QDRANT_URL")
    if qdrant_url:
        client, COLLECTION = get_qdrant_client(
            url=qdrant_url,
            api_key=os.getenv("QDRANT_API_KEY")
        )
    else:
        client, COLLECTION = get_qdrant_client(
            host=os.getenv("QDRANT_HOST", "localhost"),
            port=int(os.getenv("QDRANT_PORT", "6333")),
            api_key=os.getenv("QDRANT_API_KEY")
        )
except ResponseHandlingException:
    st.error("‚ö†Ô∏è Could not connect to Qdrant. Check your QDRANT_URL or QDRANT_HOST/PORT settings in Streamlit secrets.")
    st.stop()
except Exception as e:
    st.error(f"‚ö†Ô∏è Unexpected error initializing Qdrant: {e}")
    st.stop()

# --- Helper to fetch top K niches from Qdrant ---
def fetch_top_niches(k: int = 10):
    results = client.scroll(
        collection_name=COLLECTION,
        with_payload=True,
        limit=200
    )
    items = []
    for pt in results:
        payload = pt.payload or {}
        term = payload.get("term")
        momentum = payload.get("momentum")
        cluster = payload.get("cluster")
        if term is not None and momentum is not None:
            items.append({
                "term": term,
                "momentum": momentum,
                "cluster": cluster
            })
    # sort by descending momentum
    items.sort(key=lambda x: x["momentum"], reverse=True)
    return items[:k]

# --- Helper to generate one slide per term ---
def generate_plan_slide(prs: Presentation, term: str):
    prompt = (
        f"Create concise business plan bullet points for niche ‚Äú{term}‚Äù "
        "following this outline:\n"
        "1. Market Problem\n"
        "2. Proposed Solution\n"
        "3. Validation & MVP\n"
        "4. Market Sizing & Revenue\n"
        "5. Competitive Landscape\n"
        "6. Go-to-Market Plan\n"
        "7. Financials & Milestones\n\n"
        "Provide 2‚Äì3 bullet points per section."
    )
    resp = openai.ChatCompletion.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": "You are a concise business plan generator."},
            {"role": "user",   "content": prompt}
        ]
    )
    text = resp.choices[0].message.content

    slide = prs.slides.add_slide(prs.slide_layouts[1])
    slide.shapes.title.text = term
    body = slide.shapes.placeholders[1].text_frame
    for line in text.splitlines():
        line = line.strip()
        if not line:
            continue
        p = body.add_paragraph()
        p.text = line
        p.level = 1

# --- Streamlit UI ---
st.set_page_config(page_title="TrendScout Dashboard", layout="wide")
st.title("üìà TrendScout Dashboard")

# Sidebar controls
with st.sidebar:
    k = st.number_input("Number of Niches", min_value=1, max_value=20, value=10)
    st.markdown("---")
    st.write("Powered by Adaptixx.ai")

# Fetch and show top niches
niches = fetch_top_niches(k)
st.subheader(f"Top {k} Niches by Momentum")
for item in niches:
    st.write(f"**{item['term']}** ‚Äî Momentum: {item['momentum']:.2f}, Cluster: {item.get('cluster')}")

# Button to generate PPTX deck
if st.button("‚ú® Generate Business Plan Deck"):
    with st.spinner("Generating slides‚Ä¶"):
        prs = Presentation()
        # Title slide
        title_slide = prs.slides.add_slide(prs.slide_layouts[0])
        title_slide.shapes.title.text = "TrendScout Business Plan"
        subtitle = title_slide.placeholders[1]
        subtitle.text = "Generated by Adaptixx.ai"

        # One slide per niche
        for item in niches:
            generate_plan_slide(prs, item["term"])

        # Save to temp and offer download
        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".pptx")
        prs.save(tmp.name)
        st.success("Your business plan deck is ready!")
        st.markdown(f"[Download the PPTX file]({tmp.name})")

